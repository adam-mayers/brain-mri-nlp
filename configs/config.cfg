[paths]
train = null
dev = null
#DONE
#vectors = "en_core_sci_scibert"
#vectors = "en_core_sci_lg"
#vectors = "en_ner_bionlp13cg_md"
vectors = "en_core_web_trf"

#NOT DONE


#run this again with shuffle=true

init_tok2vec = null

[system]
gpu_allocator = null
seed = 1

[nlp]
lang = "en"
pipeline = ["tok2vec","transformer","spancat"]
#pipeline = ["transformer","spancat"]
batch_size = 128
#128 is the transformer default but several categories never got above 0
#standard default is 1000 but causes crashes during evaluation => 500
disabled = []
before_creation = null
after_creation = null
after_pipeline_creation = null
tokenizer = {"@tokenizers":"spacy.Tokenizer.v1"}

[components]

[components.spancat]
factory = "spancat"
max_positive = null
scorer = {"@scorers":"spacy.spancat_scorer.v1"}
spans_key = "sc"
threshold = 0.5

[components.spancat.model]
@architectures = "spacy.SpanCategorizer.v1"

[components.spancat.model.reducer]
@layers = "spacy.mean_max_reducer.v1"
hidden_size = 256
#default 128
#256 has improved performance (.869 default vs .882) with BERT but traning takes more than twice as long

[components.spancat.model.scorer]
@layers = "spacy.LinearLogistic.v1"
nO = null
nI = null

[components.spancat.model.tok2vec]
@architectures = "spacy.Tok2VecListener.v1"
width = 96
#width = ${components.tok2vec.model.encode.width}
upstream = "*"

[components.spancat.suggester]
@misc = "spacy.ngram_range_suggester.v1"
min_size = 1
max_size = 22
#Set this to 22 for transformer models

[components.tok2vec]
factory = "tok2vec"

[components.tok2vec.model]
@architectures = "spacy.Tok2Vec.v2"

[components.tok2vec.model.embed]
@architectures = "spacy.MultiHashEmbed.v2"
width = ${components.tok2vec.model.encode.width}
attrs = ["NORM","PREFIX","SUFFIX","SHAPE"]
rows = [5000,2500,2500,2500]
include_static_vectors = false

[components.tok2vec.model.encode]
@architectures = "spacy.MaxoutWindowEncoder.v2"
width = 96
depth = 4
window_size = 1
maxout_pieces = 3

[components.transformer]
factory = "transformer"

[components.transformer.model]
@architectures = "spacy-transformers.TransformerModel.v3"
name = "roberta-base"
tokenizer_config = {"use_fast": true}

[components.transformer.model.get_spans]
#@span_getters = "spacy-transformers.doc_spans.v1"
#some documents are longer than the 512 token limit
@span_getters = "spacy-transformers.strided_spans.v1"
window = 128
stride = 96

[corpora]

[corpora.dev]
@readers = "spacy.Corpus.v1"
path = "corpus/test.spacy"
max_length = 0
gold_preproc = false
limit = 0
augmenter = null

[corpora.train]
@readers = "spacy.Corpus.v1"
path = "corpus/train.spacy"
max_length = 0
gold_preproc = false
limit = 0
augmenter = null

[training]
dev_corpus = "corpora.dev"
train_corpus = "corpora.train"
seed = ${system.seed}
gpu_allocator = ${system.gpu_allocator}
dropout = 0.1
accumulate_gradient = 1
#default 1, default 3 in transformer models but this did not seem to work (some cats not above 0 after an hour)
patience = 2000
#increased as have also increased eval frequency. Was 1600 (8 times eval_frequency), have changed to 500/4000
max_epochs = 0
#this was zero i.e. infinite by default but needs limiting for cross validation
max_steps = 20000
eval_frequency = 200
#this was 200 by default. Increased to 500 to reduce evaluation load but this causes early stopping, needs patience changing as well if so 
frozen_components = []
annotating_components = []
before_to_disk = null

[training.batcher]
@batchers = "spacy.batch_by_words.v1"
discard_oversize = false
tolerance = 0.2
get_length = null

[training.batcher.size]
@schedules = "compounding.v1"
start = 100
stop = 1000
compound = 1.001
t = 0.0

[training.logger]
#Use this for evaluate-kfold
@loggers = "spacy.ConsoleLogger.v3"
progress_bar = train

#Use this for spacy run train
#@loggers = "my_custom_logger.v1"
#project_name = "wandb_MRI_NLP"

[training.optimizer]
@optimizers = "Adam.v1"
beta1 = 0.9
beta2 = 0.999
L2_is_weight_decay = true
L2 = 0.01
grad_clip = 1.0
use_averages = false
eps = 0.00000001
learn_rate = 0.001

#Entire below section coped from transformer defaults
#[training.optimizer.learn_rate]
#@schedules = "warmup_linear.v1"
#warmup_steps = 250
#total_steps = 20000
#initial_rate = 5e-5

[training.score_weights]
spans_sc_f = 1.0
spans_sc_p = 0.0
spans_sc_r = 0.0
tag_acc = 0.0
dep_uas = 0.0
dep_las = 0.0
sents_f = 0.0

[pretraining]

[initialize]
vectors = ${paths.vectors}
init_tok2vec = ${paths.init_tok2vec}
vocab_data = null
lookups = null
before_init = null
after_init = null

[initialize.components]

[initialize.components.spancat]

[initialize.components.spancat.labels]
@readers = "spacy.read_labels.v1"
path = "corpus/labels/spancat.json"

[initialize.tokenizer]